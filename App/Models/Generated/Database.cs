




















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `Dbcontext`
//     Provider:               `System.data.sqlclient`
//     Connection String:      `Server=.;Database=Crawler;Uid=sa;Pwd=123`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace AppModul
{

	public partial class DbcontextDB : Database
	{
		public DbcontextDB() 
			: base("Dbcontext")
		{
			CommonConstruct();
		}

		public DbcontextDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			DbcontextDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static DbcontextDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new DbcontextDB();
        }

		[ThreadStatic] static DbcontextDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static DbcontextDB repo { get { return DbcontextDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    

	[TableName("dbo.Crawler")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class Crawler : DbcontextDB.Record<Crawler>  
    {



		[Column] public int Id { get; set; }





		[Column] public string Title { get; set; }





		[Column] public string Poster { get; set; }





		[Column] public string time { get; set; }





		[Column] public string content { get; set; }





		[Column] public string NewsID { get; set; }



	}

    

	[TableName("dbo.Lagou")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class Lagou : DbcontextDB.Record<Lagou>  
    {



		[Column] public int Id { get; set; }





		[Column] public int? companyId { get; set; }





		[Column] public string formatCreateTime { get; set; }





		[Column] public int? score { get; set; }





		[Column] public int? positionId { get; set; }





		[Column] public string positionName { get; set; }





		[Column] public DateTime? createTime { get; set; }





		[Column] public string positionAdvantage { get; set; }





		[Column] public string salary { get; set; }





		[Column] public string workYear { get; set; }





		[Column] public string education { get; set; }





		[Column] public string city { get; set; }





		[Column] public string companyLogo { get; set; }





		[Column] public string jobNature { get; set; }





		[Column] public string approve { get; set; }





		[Column] public string industryField { get; set; }





		[Column] public string companyShortName { get; set; }





		[Column] public string financeStage { get; set; }





		[Column] public string companySize { get; set; }





		[Column] public byte? positionLables { get; set; }





		[Column] public string industryLables { get; set; }





		[Column] public string publisherId { get; set; }





		[Column] public string companyLabelList { get; set; }





		[Column] public string district { get; set; }





		[Column] public string businessZones { get; set; }





		[Column] public string imState { get; set; }





		[Column] public string lastLogin { get; set; }





		[Column] public string explain { get; set; }





		[Column] public string plus { get; set; }





		[Column] public string pcShow { get; set; }





		[Column] public string appShow { get; set; }





		[Column] public string deliver { get; set; }





		[Column] public string gradeDescription { get; set; }





		[Column] public string promotionScoreExplain { get; set; }





		[Column] public string firstType { get; set; }





		[Column] public string secondType { get; set; }





		[Column] public string isSchoolJob { get; set; }





		[Column] public string companyFullName { get; set; }





		[Column] public string adWord { get; set; }





		[Column] public string title { get; set; }





		[Column] public string context { get; set; }





		[Column] public string work { get; set; }



	}

    

	[TableName("dbo.Tieba")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class Tieba : DbcontextDB.Record<Tieba>  
    {



		[Column] public int Id { get; set; }





		[Column] public string title { get; set; }





		[Column] public string Tid { get; set; }





		[Column] public string username { get; set; }





		[Column] public string userid { get; set; }



	}


}
